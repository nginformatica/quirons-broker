import * as t from 'io-ts'

import { AdditionalInfo } from './schemas/Additional_1_000'
import { AllowanceInfo } from './schemas/Allowance_1_000'
import { AllowanceTypesInfo } from './schemas/AllowanceTypes_1_000'
import { ClassInfo } from './schemas/Classes_2_000'
import { InformationDeficienciesInfo } from './schemas/InformationDeficiencies'
import { LeaveOfAbsenceInfo } from './schemas/LeaveOfAbsenceControl_1_000'
import { LeaveOfAbsenceTypeInfo } from './schemas/LeaveOfAbsenceTypes_1_000'
import { PayRollCostCenterInfo } from './schemas/PayRollCostCenter_1_000'
import { PositionInfo } from './schemas/Positions_1_000'
import { StabilityControlInfo } from './schemas/StabilityControl_1_000'
import { StabilityTypeInfo } from './schemas/StabilityType_1_000'
import { TrainingNecessityInfo } from './schemas/TrainingNecessity_1_000'
import { WorkingShiftInfo } from './schemas/WorkingShift_1_000'
import { cbo, datetime, nullable } from '../custom-types'
import { SickNoteInfo } from './schemas/SickNote'
import { MedicalConsultationInfo } from './schemas/MedicalConsultation'

/** SST imports informations */
import { AccreditedInfo } from './schemas/Accredited'
import { ClinicalQuizInfo } from './schemas/ClinicalQuiz'
import { DeficienciesInfo } from './schemas/Deficiencies'
import { DocumentInfo } from './schemas/Document'
import { IpeDeliveryInfo } from './schemas/IpeDelivery'
import { MedicalRecordInfo  } from './schemas/MedicalRecord'
import { OccupationInfo } from './schemas/Occupation'
import { QuizInfo } from './schemas/Quiz'
import { RiskInfo } from './schemas/Risk'
import { VaccineInfo } from './schemas/Vaccine'
import { PreMedicalCertificateInfo } from './internal/pre-medical-certificate'

/**
 * An object as returned by TOTVS' TTalk API.
 */
export const Object = t.union([
    PayRollCostCenterInfo,
    LeaveOfAbsenceTypeInfo,
    AllowanceTypesInfo,
    PositionInfo,
    StabilityTypeInfo,
    ClassInfo,
    WorkingShiftInfo,
    LeaveOfAbsenceInfo,
    AdditionalInfo,
    InformationDeficienciesInfo,
    TrainingNecessityInfo,
    StabilityControlInfo,
    AllowanceInfo,
    SickNoteInfo,
    MedicalConsultationInfo,
    AccreditedInfo,
    ClinicalQuizInfo,
    DeficienciesInfo,
    DocumentInfo,
    IpeDeliveryInfo,
    MedicalRecordInfo,
    OccupationInfo,
    QuizInfo,
    RiskInfo,
    VaccineInfo
])
export type Object = t.TypeOf<typeof Object>

/**
 * A paginated array of objects as returned by TOTVS' TTalk API.
 */
export const PaginatedObject = t.type({
    hasNext: t.boolean,
    items: t.array(Object)
})
export type PaginatedObject = t.TypeOf<typeof PaginatedObject>

/**
 * A converter interface, meant to convert between TOTVS' models and ours.
 */
export interface Converter<From, To> {
    /**
     * Convert a TOTVS' TTalk message to an internal model of our own.
     *
     * @param from Original message
     */
    fromTTalk(from: From): To

    /**
     * Converts a message in our internal odel to TOTVS' TTalk's.
     *
     * @param from Original message
     */
    toTTalk(from: To): From
}

// Re-export types autogenerated from TOTVS' schemas!
export {
    PayRollCostCenterInfo,
    LeaveOfAbsenceTypeInfo,
    AllowanceTypesInfo,
    PositionInfo,
    StabilityTypeInfo,
    ClassInfo,
    WorkingShiftInfo,
    AdditionalInfo,
    InformationDeficienciesInfo,
    AllowanceInfo,
    LeaveOfAbsenceInfo,
    StabilityControlInfo,
    TrainingNecessityInfo,
    SickNoteInfo,
    MedicalConsultationInfo,
    AccreditedInfo,
    ClinicalQuizInfo,
    DeficienciesInfo,
    DocumentInfo,
    IpeDeliveryInfo,
    MedicalRecordInfo,
    OccupationInfo,
    QuizInfo,
    RiskInfo,
    VaccineInfo,
}

/**
 * The Person entity, as provided through our API to TOTVS.
 */
export const Person = t.intersection([
    t.type({
        id: t.string,
        name: t.string,
        cpf: t.string,
        birth: datetime,
        gender: t.number
    }),
    t.partial({
        socialName: nullable(t.string),
        rg: nullable(t.string),
        email: nullable(t.string),
        street: nullable(t.string),
        number: t.union([t.string, t.number, t.null]),
        district: nullable(t.string),
        city: nullable(t.string),
        zipCode: nullable(t.string),
        phone: nullable(t.string)
    })
])
export type Person = t.TypeOf<typeof Person>

/**
 * The Employee entity, as provided through our API to TOTVS.
 */
export const Employee = t.intersection([
    Person,
    t.type({
        registration: t.string,
        workshift: t.string,
        costCenter: t.string,
        occupation: t.string
    }),
    t.partial({
        workshiftDescription: nullable(t.string),
        costCenterDescription: nullable(t.string),
        occupationDescription: nullable(t.string),
        department: nullable(t.string),
        departmentDescription: nullable(t.string),
        admissionDate: nullable(datetime),
        dismissalDate: nullable(datetime),
        pisCode: nullable(t.string),
        eSocialRoleId: nullable(t.string),
        eSocialId: nullable(t.string),
        sefipCategory: nullable(t.string),
        situation: nullable(t.number),
        civilStatus: nullable(t.number),
        educationLevel: nullable(t.number),
        ctps: nullable(t.string),
        mothersName: nullable(t.string),
        state: nullable(t.string),
        rais: nullable(t.string),
        eSocialCategory: nullable(t.string),
        position: nullable(t.string),
        positionDescription: nullable(t.string),
        /** Identificador de Deficiência Física */
        defFisica: nullable(t.union([t.literal('S'), t.literal('N')])),
        /** Identificador de Deficiência Visual */
        defVisual: nullable(t.union([t.literal('S'), t.literal('N')])),
        /** Identificador de Deficiência Auditiva */
        defAuditiva: nullable(t.union([t.literal('S'), t.literal('N')])),
        /** Identificador de Deficiência de Fala */
        defFala: nullable(t.union([t.literal('S'), t.literal('N')])),
        /** Identificador de Deficiência Mental */
        defMental: nullable(t.union([t.literal('S'), t.literal('N')])),
        /** Identificador de Deficiência Intelectual */
        defIntelectual: nullable(t.union([t.literal('S'), t.literal('N')])),
        /** Identificador de Reabilitação */
        reabReadap: nullable(t.union([t.literal('S'), t.literal('N')])),
        /** Data do Último Exame Médico */
        lastExamDate: nullable(datetime)
    })
])
export type Employee = t.TypeOf<typeof Employee>

/**
 * The Dependant entity, as provided through our API to TOTVS.
 */
export const Dependant = t.intersection([
    t.type({
        id: t.string,
        employee: t.string,
        name: t.string,
        birth: datetime,
        gender: t.number,
        cpf: t.string
    }),
    t.partial({
        rg: nullable(t.string)
    })
])

export type Dependant = t.TypeOf<typeof Dependant>

/**
 * The FunctionalHistory entity, as provided through our API to TOTVS.
 */
export const FunctionalHistory = t.intersection([
    t.type({
        id: t.string,
        employee: t.string,
        occurrenceDate: datetime,
        costCenter: t.string,
        occupation: t.string
    }),
    t.partial({
        costCenterDescription: nullable(t.string),
        department: nullable(t.string),
        departmentDescription: nullable(t.string),
        occupationDescription: nullable(t.string),
        employeePosition: nullable(t.string),
        sefipCategory: nullable(t.string)
    })
])
export type FunctionalHistory = t.TypeOf<typeof FunctionalHistory>

/**
 * The TrainingHistory entity, as provided through our API to TOTVS.
 */
export const TrainingHistory = t.intersection([
    t.type({
        id: t.string,
        employee: t.string,
        expectedDate: datetime,
        training: t.string
    }),
    t.partial({
        trainingDescription: nullable(t.string),
        approval: nullable(t.number),
        completionDate: nullable(datetime),
        expirationDate: nullable(datetime)
    })
])

export type TrainingHistory = t.TypeOf<typeof TrainingHistory>

export const AbsenceType = t.intersection([
    t.type({
        id: t.string,
        description: t.string
    }),
    t.partial({
        eSocialCode: nullable(t.string)
    })
])

export type AbsenceType = t.TypeOf<typeof AbsenceType>

export const AllowanceType = t.type({
    id: t.string,
    description: t.string
})

export type AllowanceType = t.TypeOf<typeof AllowanceType>

export const CostCenter = t.type({
    id: t.string,
    description: t.string
})

export type CostCenter = t.TypeOf<typeof CostCenter>

export const Occupation = t.intersection([
    t.type({
        id: t.string,
        description: t.string
    }),
    t.partial({
        cbo: nullable(cbo),
        activityDetails: nullable(t.string)
    })
])

export type Occupation = t.TypeOf<typeof Occupation>

export const StabilityType = t.type({
    id: t.string,
    description: t.string
})

export type StabilityType = t.TypeOf<typeof StabilityType>

export const Training = t.intersection([
    t.type({
        id: t.string,
        description: t.string
    }),
    t.partial({
        eSocialCode: nullable(t.string)
    })
])

export type Training = t.TypeOf<typeof Training>

export const WorkingShift = t.intersection([
    t.type({
        id: t.string,
        description: t.string
    }),
    t.partial({
        productiveHours: nullable(t.number)
    })
])

export type WorkingShift = t.TypeOf<typeof WorkingShift>

export const Department = t.intersection([
    t.type({
        id: t.string,
        description: t.string
    }),
    t.partial({ 
        companyId: nullable(t.string),
        branchId: t.union([t.string, t.null, t.literal(false)])
    })
])

export type Department = t.TypeOf<typeof Department>

export const Position = t.intersection([
    t.type({
        id: t.string,
        description: t.string
    }),
    t.partial({ 
        observation: nullable(t.string)
    })
])

export type Position = t.TypeOf<typeof Position>

export const SickNote = SickNoteInfo

export type SickNote = t.TypeOf<typeof SickNote>

export const MedicalConsultation = MedicalConsultationInfo

export type MedicalConsultation = t.TypeOf<typeof MedicalConsultation>

export const Accredited = AccreditedInfo
export type Accredited = t.TypeOf<typeof Accredited>
export const ClinicalQuiz = ClinicalQuizInfo
export type ClinicalQuiz = t.TypeOf<typeof ClinicalQuiz>
export const Deficiencies = DeficienciesInfo
export type Deficiencies = t.TypeOf<typeof Deficiencies>
export const Document = DocumentInfo
export type Document = t.TypeOf<typeof Document>
export const IpeDelivery = IpeDeliveryInfo
export type IpeDelivery = t.TypeOf<typeof IpeDelivery>
export const MedicalRecord = MedicalRecordInfo
export type MedicalRecord = t.TypeOf<typeof MedicalRecord>
export const SSTOccupation = OccupationInfo
export type SSTOccupation = t.TypeOf<typeof SSTOccupation>
export const Quiz = QuizInfo
export type Quiz = t.TypeOf<typeof Quiz>
export const Risk = RiskInfo
export type Risk = t.TypeOf<typeof Risk>
export const Vaccine = VaccineInfo
export type Vaccine = t.TypeOf<typeof Vaccine>
export const PreMedicalCertificate = PreMedicalCertificateInfo
export type PreMedicalCertificate = t.TypeOf<typeof PreMedicalCertificate>
