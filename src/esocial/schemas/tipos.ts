/*
    This file was initially machine-generated by recycle/GENERATE.js, using
    eSocial's tipos.xsd schema, and includes corresponding io-ts types.

    EDIT WITH CARE.
*/
import * as t from 'io-ts'

/// Date in xs:date format
export const date = t.string

/// Identificação única do evento.
/// REGRA:REGRA_VALIDA_ID_EVENTO
export const TS_Id = t.string

/// Identificação única do evento.
export const TS_Id_retorno = TS_Id

/// Informe [1] para arquivo original ou [2] para arquivo de retificação.
export const TS_indRetif = t.union([
    /// Original
    t.literal(1),
    /// Retificação
    t.literal(2)
])

/// Preencher com o número do recibo do arquivo a ser retificado.
/// Validação: O preenchimento é obrigatório se {indRetif}(./indRetif) = [2].
/// Deve ser um recibo de entrega válido, correspondente ao arquivo que está sendo retificado.
export const TS_nrRecibo = t.string

/// Identificação do ambiente.
export const TS_tpAmb = t.union([
    /// Produção
    t.literal(1),
    /// Produção restrita
    t.literal(2),
    /// Validação (uso interno)
    t.literal(7),
    /// Teste (uso interno)
    t.literal(8),
    /// Desenvolvimento (uso interno)
    t.literal(9)
])

/// Processo de emissão do evento.
export const TS_procEmi = t.union([
    /// Aplicativo do empregador
    t.literal(1),
    /// Aplicativo governamental - Simplificado Pessoa Física
    t.literal(2),
    /// Aplicativo governamental - Web Geral
    t.literal(3),
    /// Aplicativo governamental - Simplificado Pessoa Jurídica
    t.literal(4),
    /// Aplicativo governamental para dispositivos móveis - Empregador Doméstico
    t.literal(22),
    /// Aplicativo governamental para envio de eventos pelo Judiciário
    t.literal(81),
    /// Aplicativo governamental - Integração com a Junta Comercial
    t.literal(91)
])

/// Versão do processo de emissão do evento. Informar a versão do aplicativo emissor do evento.
export const TS_verProc = t.string

/// Preencher com o código correspondente ao tipo de inscrição, conforme Tabela 05.
export const TS_tpInsc_1_2 = t.union([
    /// CNPJ
    t.literal(1),
    /// CPF
    t.literal(2)
])

/// Preencher com o código correspondente ao tipo de inscrição, conforme Tabela 05.
export const TS_tpInsc_1_3_4 = t.union([
    /// CNPJ
    t.literal(1),
    /// CAEPF
    t.literal(3),
    /// CNO
    t.literal(4)
])

/// Preencher com o código correspondente ao tipo de inscrição, conforme Tabela 05.
export const TS_tpInsc_1_2_4 = t.union([
    /// CNPJ
    t.literal(1),
    /// CPF
    t.literal(2),
    /// CNO
    t.literal(4)
])

/// Preencher com o código correspondente ao tipo de inscrição, conforme Tabela 05.
export const TS_tpInsc_1_2_3_4 = t.union([
    /// CNPJ
    t.literal(1),
    /// CPF
    t.literal(2),
    /// CAEPF
    t.literal(3),
    /// CNO
    t.literal(4)
])

/// Preencher com o código correspondente ao tipo de inscrição, conforme Tabela 05.
export const TS_tpInsc_1 = /// CNPJ
t.literal(1)

/// Preencher com o código correspondente ao tipo de inscrição, conforme Tabela 05.
export const TS_tpInsc_2 = /// CPF
t.literal(2)

export const TS_nrInsc_8_11_14 = t.string

export const TS_nrInsc_12_14 = t.string

export const TS_nrInsc_11_12_14 = t.string

export const TS_nrInsc_11_14 = t.string

export const TS_cnpj = t.string

export const TS_indCoop = t.union([
    /// Não é cooperativa
    t.literal(0),
    /// Cooperativa de trabalho
    t.literal(1),
    /// Cooperativa de produção
    t.literal(2),
    /// Outras cooperativas
    t.literal(3)
])

export const TS_indConstr = t.union([
    /// Não é construtora
    t.literal(0),
    /// Empresa construtora
    t.literal(1)
])

/// Preencher com o código CNAE conforme legislação vigente, referente à atividade econômica preponderante do estabelecimento.
/// Validação: Deve ser um número existente na tabela CNAE.
export const TS_cnae = t.number

export const TS_aliqRat = t.union([
    t.literal(1),
    t.literal(2),
    t.literal(3)
])

export const TS_fap = t.number

/// Preencher com o código correspondente ao tipo de processo.
export const TS_tpProc_1_2 = t.union([
    /// Administrativo
    t.literal(1),
    /// Judicial
    t.literal(2)
])

/// Preencher com o código correspondente ao tipo de processo.
export const TS_tpProc_1_2_4 = t.union([
    /// Administrativo
    t.literal(1),
    /// Judicial
    t.literal(2),
    /// Processo FAP de exercício anterior a 2019
    t.literal(4)
])

export const TS_nrProc_17_20_21 = t.string

export const TS_nrProc_16_17_20_21 = t.string

export const TS_nrProcJud = t.string

/// Código do indicativo da suspensão, atribuído pelo empregador em S-1070.
/// Validação: A informação prestada deve estar de acordo com o que foi informado em S-1070.
export const TS_codSusp = t.number

export const TS_indSubstPatrObra = t.union([
    /// Contribuição patronal substituída
    t.literal(1),
    /// Contribuição patronal não substituída
    t.literal(2)
])

export const TS_codigo_esocial = t.string

/// Preencher com o identificador da Tabela de Rubricas para a rubrica definida em {codRubr}(./codRubr).
export const TS_ideTabRubr = t.string

/// Preencher com o código correspondente ao tipo de lotação.
/// Validação: Deve ser um código válido e existente na Tabela 10, bem como compatível com a classificação tributária indicada no evento S-1000, conforme Tabela 12.
export const TS_tpLotacao = t.string

/// Preencher com o código relativo ao FPAS.
/// Validação: Deve ser um código FPAS válido, conforme Tabela 04.
export const TS_fpas = t.number

export const TS_codTercs = t.string

export const TS_uf = t.union([
    t.literal('AC'),
    t.literal('AL'),
    t.literal('AP'),
    t.literal('AM'),
    t.literal('BA'),
    t.literal('CE'),
    t.literal('DF'),
    t.literal('ES'),
    t.literal('GO'),
    t.literal('MA'),
    t.literal('MT'),
    t.literal('MS'),
    t.literal('MG'),
    t.literal('PA'),
    t.literal('PB'),
    t.literal('PR'),
    t.literal('PE'),
    t.literal('PI'),
    t.literal('RJ'),
    t.literal('RN'),
    t.literal('RS'),
    t.literal('RO'),
    t.literal('RR'),
    t.literal('SC'),
    t.literal('SP'),
    t.literal('SE'),
    t.literal('TO')
])

/// Preencher com o código do município, conforme tabela do IBGE.
/// Validação: Deve ser um código válido e existente na tabela do IBGE.
export const TS_codMunic = t.string

/// Indicativo de período de apuração.
export const TS_indApuracao = t.union([
    /// Mensal
    t.literal(1),
    /// Anual (13° salário)
    t.literal(2)
])

/// Informar o mês/ano (formato AAAA-MM) de referência das informações, se {indApuracao}(./indApuracao) for igual a [1], ou apenas o ano (formato AAAA), se {indApuracao}(./indApuracao) for igual a [2].
/// Validação: Deve ser um mês/ano ou ano válido, igual ou posterior ao início da obrigatoriedade dos eventos periódicos para o empregador.
export const TS_perApur = t.string

/// Indicativo do tipo de guia.
export const TS_indGuia = /// Documento de Arrecadação do eSocial - DAE
t.literal(1)

export const TS_cpf = t.string

/// Indicador de desconto da contribuição previdenciária do trabalhador.
export const TS_indMV = t.union([
    /// O declarante aplica a(s) alíquota(s) de desconto do segurado sobre a remuneração por ele informada (o percentual da(s) alíquota(s) será(ão) obtido(s) considerando a remuneração total do trabalhador)
    t.literal(1),
    /// O declarante aplica a(s) alíquota(s) de desconto do segurado sobre a diferença entre o limite máximo do salário de contribuição e a remuneração de outra(s) empresa(s) para as quais o trabalhador informou que houve o desconto
    t.literal(2),
    /// O declarante não realiza desconto do segurado, uma vez que houve desconto sobre o limite máximo de salário de contribuição em outra(s) empresa(s)
    t.literal(3)
])

export const TS_nome = t.string

/// Preencher com a data de nascimento.
/// Validação: Deve ser maior ou igual que 01/01/1890 e menor ou igual à data atual.
export const TS_dtNascto = date

/// Matrícula do trabalhador no empregador anterior.
export const TS_matricAnt = TS_codigo_esocial

/// Preencher com a data de admissão do trabalhador. No caso de transferência do empregado, deve ser preenchida a data inicial do vínculo no primeiro empregador (data de início do vínculo).
export const TS_dtAdm = date

/// Abrangência da decisão.
export const TS_tpTrib = t.union([
    /// IRRF
    t.literal(1),
    /// Contribuições sociais do trabalhador
    t.literal(2)
])

/// Dia do mês efetivamente trabalhado pelo empregado com contrato de trabalho intermitente.
/// Validação: Deve ser um número entre 1 e 31, de acordo com o calendário anual.
export const TS_dia = t.number

/// Preencher com o código da categoria do trabalhador.
/// Validação: Deve ser um código válido e existente na Tabela 01.
export const TS_codCateg = t.string

/// Preencher com o código correspondente ao tipo de inscrição do estabelecimento, de acordo com as opções da Tabela 05.
/// Validação: Se {classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000 = [21], deve ser igual a [3, 4].
/// Se {classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000 = [22], deve ser igual a [3, 4] e, se for igual a [3] e não se tratar de empregado doméstico, o CAEPF deve constar na Tabela S-1005 como sendo de segurado especial.
/// Nos demais casos ({classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000 diferente de [21, 22]), deve ser igual a [1, 4].
export const TS_tpInsc_EstabLot = TS_tpInsc_1_3_4

/// Preencher com o código correspondente ao tipo de inscrição do estabelecimento, de acordo com as opções da Tabela 05.
export const TS_tpInsc_EstabLot_1_4 = t.union([
    /// CNPJ
    t.literal(1),
    /// CNO
    t.literal(4)
])

/// Informar o número de inscrição do estabelecimento do contribuinte de acordo com o tipo de inscrição indicado no campo {ideEstabLot/tpInsc}(./tpInsc).
/// Validação: A inscrição informada deve ser compatível com {ideEstabLot/tpInsc}(./tpInsc).
export const TS_nrInsc_EstabLot = TS_nrInsc_12_14

/// Informar o código atribuído pelo empregador para a lotação tributária.
export const TS_codLotacao = TS_codigo_esocial

/// Indicador de contribuição substituída.
/// Validação: O preenchimento do campo é obrigatório apenas no caso das empresas enquadradas no regime de tributação Simples Nacional, com tributação previdenciária substituída e não substituída ({classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000 = [03]). Para os demais empregadores, não deve ser informado.
export const TS_indSimples = t.union([
    /// Contribuição substituída integralmente
    t.literal(1),
    /// Contribuição não substituída
    t.literal(2),
    /// Contribuição não substituída concomitante com contribuição substituída
    t.literal(3)
])

/// Informar a quantidade de referência para apuração (em horas, cotas, meses, etc.). Ex.: Quantidade de horas extras trabalhadas relacionada com uma rubrica de hora extra, quantidade de dias trabalhados relacionada com uma rubrica de salário, etc.
/// Preenchimento obrigatório quando se tratar de rubrica relativa a faltas ou Descanso Semanal Remunerado - DSR sobre faltas (nesse caso, informar a quantidade de dias).
/// Validação: Deve ser maior que 0 (zero). Informação obrigatória se {codRubr}(./codRubr) tiver {natRubr}(1010_infoRubrica_inclusao_dadosRubrica_natRubr) em S-1010 igual a [9207, 9211].
export const TS_qtdRubr = t.number

/// Informar o fator, percentual, etc. da rubrica, quando necessário. Ex.: Adicional de horas extras 50%, relacionado a uma rubrica de horas extras: Fator = 50.
/// Validação: Deve ser maior que 0 (zero).
export const TS_fator = t.number

export const TS_indApurIR = t.union([
    /// Normal (apuração sob a folha de pagamento declarada no eSocial)
    t.literal(0),
    /// Situação especial de apuração de IR
    t.literal(1)
])

/// Preencher com o código que representa o grau de exposição a agentes nocivos, conforme Tabela 02.
export const TS_grauExp = t.union([
    /// Não ensejador de aposentadoria especial
    t.literal(1),
    /// Ensejador de aposentadoria especial - FAE15_12% (15 anos de contribuição e alíquota de 12%)
    t.literal(2),
    /// Ensejador de aposentadoria especial - FAE20_09% (20 anos de contribuição e alíquota de 9%)
    t.literal(3),
    /// Ensejador de aposentadoria especial - FAE25_06% (25 anos de contribuição e alíquota de 6%)
    t.literal(4)
])

/// Tipo do instrumento ou situação ensejadora da remuneração relativa a períodos de apuração anteriores.
export const TS_tpAcConv = t.union([
    /// Acordo Coletivo de Trabalho
    t.literal('A'),
    /// Legislação federal, estadual, municipal ou distrital
    t.literal('B'),
    /// Convenção Coletiva de Trabalho
    t.literal('C'),
    /// Sentença normativa - Dissídio
    t.literal('D'),
    /// Conversão de licença saúde em acidente de trabalho
    t.literal('E'),
    /// Outras verbas de natureza salarial ou não salarial devidas após o desligamento
    t.literal('F'),
    /// Antecipação de diferenças de acordo, convenção ou dissídio coletivo
    t.literal('G')
])

export const TS_cbo = t.string

/// Natureza da atividade.
/// Validação: Se {codCateg}(../../infoContrato_codCateg) = [104], deve ser preenchido com [1]. Se {codCateg}(../../infoContrato_codCateg) = [102], deve ser preenchido com [2].
export const TS_natAtividade = t.union([
    /// Trabalho urbano
    t.literal(1),
    /// Trabalho rural
    t.literal(2)
])

/// Número do benefício.
export const TS_nrBeneficio = t.string

export const TS_indComerc = t.union([
    /// Comercialização da produção efetuada diretamente no varejo a consumidor final ou a outro produtor rural pessoa física por produtor rural pessoa física, inclusive por segurado especial, ou por pessoa física não produtor rural
    t.literal(2),
    /// Comercialização da produção por prod. rural PF/seg. especial - Vendas a PJ (exceto entidade inscrita no Programa de Aquisição de Alimentos - PAA) ou a intermediário PF
    t.literal(3),
    /// Comercialização da produção isenta de acordo com a Lei 13.606/2018
    t.literal(7),
    /// Comercialização da produção da pessoa física/segurado especial para entidade inscrita no PAA
    t.literal(8),
    /// Comercialização da produção no mercado externo
    t.literal(9)
])

export const TS_indSubstPatr = t.union([
    /// Integralmente substituída
    t.literal(1),
    /// Parcialmente substituída
    t.literal(2)
])

/// Unidade de pagamento da parte fixa da remuneração.
export const TS_undSalFixo = t.union([
    /// Por hora
    t.literal(1),
    /// Por dia
    t.literal(2),
    /// Por semana
    t.literal(3),
    /// Por quinzena
    t.literal(4),
    /// Por mês
    t.literal(5),
    /// Por tarefa
    t.literal(6),
    /// Não aplicável - Salário exclusivamente variável
    t.literal(7)
])

/// Tipo de contrato de trabalho.
export const TS_tpContr = t.union([
    /// Prazo indeterminado
    t.literal(1),
    /// Prazo determinado, definido em dias
    t.literal(2),
    /// Prazo determinado, vinculado à ocorrência de um fato
    t.literal(3)
])

export const TS_sexo = t.union([
    /// Masculino
    t.literal('M'),
    /// Feminino
    t.literal('F')
])

export const TS_racaCor = t.union([
    /// Branca
    t.literal(1),
    /// Preta
    t.literal(2),
    /// Parda
    t.literal(3),
    /// Amarela
    t.literal(4),
    /// Indígena
    t.literal(5),
    /// Não informado
    t.literal(6)
])

export const TS_estCivil = t.union([
    /// Solteiro
    t.literal(1),
    /// Casado
    t.literal(2),
    /// Divorciado
    t.literal(3),
    /// Separado
    t.literal(4),
    /// Viúvo
    t.literal(5)
])

/// Grau de instrução do trabalhador.
export const TS_grauInstr = t.union([
    /// Analfabeto, inclusive o que, embora tenha recebido instrução, não se alfabetizou
    t.literal('01'),
    /// Até o 5º ano incompleto do ensino fundamental (antiga 4ª série) ou que se tenha alfabetizado sem ter frequentado escola regular
    t.literal('02'),
    /// 5º ano completo do ensino fundamental
    t.literal('03'),
    /// Do 6º ao 9º ano do ensino fundamental incompleto (antiga 5ª a 8ª série)
    t.literal('04'),
    /// Ensino fundamental completo
    t.literal('05'),
    /// Ensino médio incompleto
    t.literal('06'),
    /// Ensino médio completo
    t.literal('07'),
    /// Educação superior incompleta
    t.literal('08'),
    /// Educação superior completa
    t.literal('09'),
    /// Pós-graduação completa
    t.literal('10'),
    /// Mestrado completo
    t.literal('11'),
    /// Doutorado completo
    t.literal('12')
])

/// Tipo de logradouro.
/// Validação: Se informado, deve ser um código válido e existente na Tabela 20.
export const TS_tpLograd = t.string

/// Número do logradouro.
/// Se não houver número a ser informado, preencher com "S/N".
export const TS_nrLograd = t.string

/// Complemento do logradouro.
export const TS_complemento = TS_codigo_esocial

/// Nome do bairro/distrito.
export const TS_bairro = t.string

/// Código de Endereçamento Postal - CEP.
/// Validação: Deve ser preenchido apenas com números, com 8 (oito) posições.
export const TS_cep = t.string

/// Código de Endereçamento Postal.
export const TS_codPostal = t.string

export const TS_tmpResid = t.union([
    /// Prazo indeterminado
    t.literal(1),
    /// Prazo determinado
    t.literal(2)
])

/// Condição de ingresso do trabalhador imigrante.
/// Validação: Se {tmpResid}(./tmpResid) = [1], não pode ser informado [2, 5]. Se {tmpResid}(./tmpResid) = [2], não pode ser informado [1].
export const TS_condIng = t.union([
    /// Refugiado
    t.literal(1),
    /// Solicitante de refúgio
    t.literal(2),
    /// Permanência no Brasil em razão de reunião familiar
    t.literal(3),
    /// Beneficiado pelo acordo entre países do Mercosul
    t.literal(4),
    /// Dependente de agente diplomático e/ou consular de países que mantêm acordo de reciprocidade para o exercício de atividade remunerada no Brasil
    t.literal(5),
    /// Beneficiado pelo Tratado de Amizade, Cooperação e Consulta entre a República Federativa do Brasil e a República Portuguesa
    t.literal(6),
    /// Outra condição
    t.literal(7)
])

/// Tipo de dependente.
/// Validação: Deve ser um código válido e existente na Tabela 07.
export const TS_tpDep = t.string

/// Tipo de regime trabalhista.
export const TS_tpRegTrab = t.union([
    /// CLT - Consolidação das Leis de Trabalho e legislações trabalhistas específicas
    t.literal(1),
    /// Estatutário/legislações específicas (servidor temporário, militar, agente político, etc.)
    t.literal(2)
])

/// Tipo de regime previdenciário (ou Sistema de Proteção Social dos Militares).
/// Validação: Se {codCateg}(./infoContrato_codCateg) = [104], deve ser preenchido com [1]. Se {codCateg}(./infoContrato_codCateg) = [101, 102, 103, 105, 106, 107, 108, 111], não pode ser preenchido com [2].
export const TS_tpRegPrev = t.union([
    /// Regime Geral de Previdência Social - RGPS
    t.literal(1),
    /// Regime Próprio de Previdência Social - RPPS ou Sistema de Proteção Social dos Militares
    t.literal(2),
    /// Regime de Previdência Social no exterior
    t.literal(3)
])

/// Regime de jornada do empregado.
export const TS_tpRegJor = t.union([
    /// Submetido a horário de trabalho (Capítulo II do Título II da CLT)
    t.literal(1),
    /// Atividade externa especificada no inciso I do art. 62 da CLT
    t.literal(2),
    /// Função especificada no inciso II do art. 62 da CLT
    t.literal(3),
    /// Teletrabalho, previsto no inciso III do art. 62 da CLT
    t.literal(4)
])

/// Mês relativo à data base da categoria profissional do trabalhador.
/// Validação: Se informado, deve ser maior ou igual a 1 e menor ou igual a 12.
export const TS_dtBase = t.number

/// Preencher com o CNPJ do sindicato representativo da categoria (preponderante ou diferenciada).
/// Validação: Deve ser um CNPJ válido, com 14 (catorze) algarismos.
export const TS_cnpjSindCategProf = TS_cnpj

/// Informar a data de opção do trabalhador pelo FGTS.
export const TS_dtOpcFGTS = date

/// Tipo de plano de segregação da massa.
export const TS_tpPlanRP = t.union([
    /// Sem segregação da massa
    t.literal(0),
    /// Fundo em capitalização
    t.literal(1),
    /// Fundo em repartição
    t.literal(2),
    /// Mantido pelo Tesouro
    t.literal(3)
])

/// Informar a Classificação Brasileira de Ocupações - CBO relativa ao cargo.
/// Validação: Informação obrigatória e exclusiva se {nmCargo}(./nmCargo) for preenchido. Se informado, deve ser um código válido e existente na tabela de CBO, com 6 (seis) posições.
export const TS_CBOCargo = TS_cbo

/// Informar a CBO relativa à função de confiança/cargo em comissão.
/// Validação: Informação obrigatória e exclusiva se {nmFuncao}(./nmFuncao) for preenchido. Se informado, deve ser um código válido e existente na tabela de CBO, com 6 (seis) posições.
export const TS_CBOFuncao = TS_cbo

/// Data do término do contrato por prazo determinado.
/// Validação: O preenchimento é obrigatório se {tpContr}(./tpContr) = [2]. Não informar se {tpContr}(./tpContr) = [1]. Se preenchido, deve ser igual ou posterior à data de admissão (no caso de transferência ou mudança de CPF, igual ou posterior a {sucessaoVinc/dtTransf}(2200_vinculo_sucessaoVinc_dtTransf), {transfDom/dtTransf}(2200_vinculo_transfDom_dtTransf) ou {dtAltCPF}(2200_vinculo_mudancaCPF_dtAltCPF) do evento S-2200, conforme o caso).
export const TS_dtTerm = date

/// Preencher com o código do motivo de afastamento temporário.
/// Validação: Deve ser um código válido e existente na Tabela 18.
export const TS_codMotAfast = t.string

/// Preencher com a data da alteração das informações.
/// Validação: Não pode ser posterior a 180 (cento e oitenta) dias da data atual.
export const TS_dtAlteracao = date

export const TS_crm = t.string

export const TS_pensAlim = t.union([
    /// Não existe pensão alimentícia
    t.literal(0),
    /// Percentual de pensão alimentícia
    t.literal(1),
    /// Valor de pensão alimentícia
    t.literal(2),
    /// Percentual e valor de pensão alimentícia
    t.literal(3)
])

export const TS_tpBeneficio = t.number

/// Tipo de pensão por morte.
export const TS_tpPenMorte = t.union([
    /// Vitalícia
    t.literal(1),
    /// Temporária
    t.literal(2)
])

/// Indicativo de 13° salário.
/// Validação: Se {indApuracao}(/ideEvento_perApur) = [2], preencher com [1].
export const TS_ind13 = t.union([
    /// Mensal
    t.literal(0),
    /// 13° salário ({codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em S-1010 = [12, 14, 16, 22, 26, 32, 92, 94, 96, 98])
    t.literal(1)
])

/// Indicativo de incidência de FGTS.
/// Validação: Se {codIncFGTS}(1010_infoRubrica_inclusao_dadosRubrica_codIncFGTS) em S-1010 for igual a [11, 12, 21], deve ser retornado [1].
/// Se {codIncFGTS}(1010_infoRubrica_inclusao_dadosRubrica_codIncFGTS) em S-1010 for igual a [91, 92, 93], deve ser retornado [9].
export const TS_indIncid = t.union([
    /// Normal (incidência de FGTS)
    t.literal(1),
    /// Incidência de FGTS suspensa em decorrência de decisão judicial
    t.literal(9)
])

export const TS_tpValorE = t.union([
    /// FGTS dissídio mensal
    t.literal(13),
    /// FGTS dissídio 13º salário
    t.literal(14),
    /// FGTS dissídio mensal - Aprendiz/Contrato Verde e Amarelo
    t.literal(17),
    /// FGTS dissídio 13º salário - Aprendiz/Contrato Verde e Amarelo
    t.literal(18),
    /// FGTS dissídio mês da rescisão
    t.literal(24),
    /// FGTS dissídio 13º salário rescisório
    t.literal(25),
    /// FGTS dissídio aviso prévio indenizado
    t.literal(26),
    /// FGTS dissídio mês da rescisão - Aprendiz/Contrato Verde e Amarelo
    t.literal(30),
    /// FGTS dissídio 13° salário rescisório - Aprendiz/Contrato Verde e Amarelo
    t.literal(31),
    /// FGTS dissídio aviso prévio indenizado - Aprendiz/Contrato Verde e Amarelo
    t.literal(32),
    /// FGTS dissídio mensal - Indenização compensatória do empregado doméstico
    t.literal(43),
    /// FGTS dissídio 13º salário - Indenização compensatória do empregado doméstico
    t.literal(44),
    /// FGTS dissídio mês da rescisão - Indenização compensatória do empregado doméstico
    t.literal(48),
    /// FGTS dissídio 13º salário rescisório - Indenização compensatória do empregado doméstico
    t.literal(49),
    /// FGTS dissídio aviso prévio indenizado - Indenização compensatória do empregado doméstico
    t.literal(50)
])

/// Preencher com o número do recibo do arquivo que deu origem ao presente arquivo de retorno ao empregador.
/// Validação: Deve ser um recibo de entrega válido, correspondente ao arquivo que deu origem ao presente arquivo de retorno (S-1299).
export const TS_nrRecArqBase = TS_nrRecibo

export const TS_periodo_mensal = t.string

export const TS_texto_100 = t.string

export const TS_texto_255 = t.string

export const TS_texto_999 = t.string

export const TS_sim_nao = t.union([
    /// Sim
    t.literal('S'),
    /// Não
    t.literal('N')
])

export const TS_valor = t.number

export const TS_valorMonetario_positivo = t.number

export const TS_valorMonetario = t.number

export const TS_percentual_positivo = t.number

export const TS_percentual = t.number

export const TS_pais = t.string

export const TS_hora = t.string

/// Preencher com o mês e ano de início da validade das informações prestadas no evento, no formato AAAA-MM.
/// Validação: Deve ser uma data válida, igual ou posterior à data de início de obrigatoriedade deste evento para o empregador no eSocial, no formato AAAA-MM.
export const TS_iniValid = TS_periodo_mensal

/// Preencher com o mês e ano de término da validade das informações, se houver.
/// Validação: Se informado, deve estar no formato AAAA-MM e ser um período igual ou posterior a {iniValid}(./iniValid).
export const TS_fimValid = TS_periodo_mensal

/// Informar um número de processo judicial cadastrado através do evento S-1070, cujo {indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) seja igual a [1].
/// Validação: Deve ser um número de processo judicial válido e existente na Tabela de Processos (S-1070), com {indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) = [1].
export const TS_nrProcJud_1 = TS_nrProcJud

/// Informar um número de processo judicial cadastrado através do evento S-1070, cujo {indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) seja igual a [1, 7].
/// Validação: Deve ser um número de processo judicial válido e existente na Tabela de Processos (S-1070), com {indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) = [1, 7].
export const TS_nrProcJud_1_7 = TS_nrProcJud

/// Observação.
export const TS_observacao = TS_texto_255

/// Informar o mês/ano (formato AAAA-MM) de referência das informações.
/// Validação: Deve ser um mês/ano válido, igual ou posterior ao início da obrigatoriedade dos eventos periódicos para o empregador.
export const TS_perApur_mensal = TS_periodo_mensal

/// Preencher com o número do CPF do trabalhador.
/// Validação: Deve ser um CPF válido.
export const TS_cpfRemun = TS_cpf

/// Número de inscrição no CPF.
/// Validação: Deve ser um número de CPF válido, observando o que segue:
/// a) O preenchimento é obrigatório se {depIRRF}(./depIRRF) = [S];
/// b) Em arquivo de empregador Pessoa Física, deve ser diferente do CPF informado em {ideEmpregador}(/ideEmpregador);
/// c) Não pode haver mais de um dependente com o mesmo número de CPF.
export const TS_cpfDep = TS_cpf

/// Número de inscrição no CPF.
/// Validação: Deve ser um número de CPF válido, observando o que segue:
/// a) O preenchimento é obrigatório se {depIRRF}(./depIRRF) = [S];
/// b) Não pode haver mais de um dependente com o mesmo número de CPF.
export const TS_cpfDepBenef = TS_cpf

/// Preencher com o número do CPF do trabalhador.
export const TS_cpfTrab = TS_cpf

/// Preencher com o número do CPF do trabalhador.
/// Validação: Deve ser um CPF constante no arquivo gerado pelo empregador no evento de origem.
export const TS_cpfRetorno = TS_cpf

/// Preencher com o código da categoria do trabalhador na qual houve a remuneração.
/// Validação: Deve ser um código válido e existente na Tabela 01.
export const TS_codCategOE = TS_codCateg

/// Preencher com o valor da remuneração recebida pelo trabalhador na outra empresa/atividade, sobre a qual houve desconto/recolhimento da contribuição do segurado.
/// Validação: Deve ser maior que 0 (zero).
export const TS_vlrRemunOE = TS_valorMonetario_positivo

/// Informar o nome do trabalhador.
export const TS_nmTrab = TS_nome

/// Nome social para travesti ou transexual.
export const TS_nmSoc = TS_nome

/// Nome do dependente.
export const TS_nmDep = TS_nome

/// Informar o nome do beneficiário.
export const TS_nmBenefic = TS_nome

/// Valor total da rubrica.
/// Validação: Deve ser maior que 0 (zero).
export const TS_vrRubr = TS_valorMonetario_positivo

/// Informar o período ao qual se refere o complemento de remuneração, no formato AAAA-MM.
/// Validação: Deve ser igual ou anterior ao período de apuração informado em {perApur}(/ideEvento_perApur).
/// Deve ser informado no formato AAAA-MM.
export const TS_perRef = TS_periodo_mensal

/// Descrição do instrumento ou situação que originou o pagamento das verbas relativas a períodos anteriores.
export const TS_dsc = TS_texto_255

/// Salário base do trabalhador, correspondente à parte fixa da remuneração.
/// Validação: Se {undSalFixo}(./undSalFixo) for igual a [7], preencher com 0 (zero).
export const TS_vrSalFx = TS_valorMonetario

/// Sexo do trabalhador.
export const TS_sexoTrab = TS_sexo

/// Raça e cor do trabalhador.
export const TS_racaCorTrab = TS_racaCor

/// Raça e cor do beneficiário.
export const TS_racaCorBenef = TS_racaCor

/// Estado civil do trabalhador.
export const TS_estCivilTrab = TS_estCivil

/// Estado civil do beneficiário.
export const TS_estCivilBenef = TS_estCivil

/// Descrição do logradouro.
export const TS_dscLograd = TS_texto_100

/// Deficiência física.
export const TS_defFisica = TS_sim_nao

/// Deficiência visual.
export const TS_defVisual = TS_sim_nao

/// Deficiência auditiva.
export const TS_defAuditiva = TS_sim_nao

/// Deficiência mental.
export const TS_defMental = TS_sim_nao

/// Deficiência intelectual.
export const TS_defIntelectual = TS_sim_nao

/// Informar se o trabalhador é reabilitado (empregado) ou readaptado (servidor público/militar).
/// Reabilitado: estando o empregado incapacitado parcial ou totalmente para o trabalho, cumpriu programa de reabilitação profissional no INSS, recebendo certificado e sendo proporcionados os meios indicados para participar do mercado de trabalho.
/// Readaptado: o servidor está investido em cargo de atribuições e responsabilidades compatíveis com a limitação que tenha sofrido em sua capacidade física ou mental verificada em inspeção médica.
export const TS_reabReadap = TS_sim_nao

/// Informar se é dependente do trabalhador para fins de dedução de seu rendimento tributável pelo Imposto de Renda.
export const TS_depIRRF = TS_sim_nao

/// Informar se é dependente do beneficiário para fins de dedução de seu rendimento tributável pelo Imposto de Renda.
export const TS_depIRRF_Benef = TS_sim_nao

/// Informar se é dependente para fins de recebimento do benefício de salário-família.
export const TS_depSF = TS_sim_nao

/// Informar se o dependente tem incapacidade física ou mental para o trabalho.
export const TS_incTrab = TS_sim_nao

/// Indicação do objeto determinante da contratação por prazo determinado (obra, serviço, safra, etc.).
/// Validação: O preenchimento é obrigatório e exclusivo se {tpContr}(./tpContr) = [3].
export const TS_objDet = TS_texto_255

/// Preencher com o código do país de nacionalidade do trabalhador.
/// Validação: Deve ser um código válido e existente na Tabela 06.
export const TS_paisNac = TS_pais

/// Percentual a ser destinado a pensão alimentícia.
/// Validação: Deve ser maior que 0 (zero) e menor ou igual a 100 (cem).
/// Informação obrigatória e exclusiva se {pensAlim}(./pensAlim) = [1, 3].
export const TS_percAliment = TS_percentual_positivo

/// Valor da pensão alimentícia.
/// Validação: Deve ser maior que 0 (zero).
/// Informação obrigatória e exclusiva se {pensAlim}(./pensAlim) = [2, 3].
export const TS_vrAlim = TS_valorMonetario_positivo

/// Indicar se o servidor optou pela remuneração do cargo efetivo.
/// Validação: Informação obrigatória e exclusiva se {CBOCargo}(../cargoFuncao_CBOCargo) = [111120, 111250, 111255]).
export const TS_indRemunCargo = TS_sim_nao

/// Informar se o beneficiário é pessoa com doença incapacitante que isenta da contribuição previdenciária, total ou parcialmente, reconhecida administrativa ou judicialmente, na forma da lei.
export const TS_incFisMen = TS_sim_nao

/// Informar se o dependente é pessoa com doença incapacitante, na forma da lei.
export const TS_incFisMenDep = TS_sim_nao

export const T_sucessaoVinc = t.intersection([
    t.type({
        tpInsc: TS_tpInsc_1_2,
        /// Informar o número de inscrição do empregador anterior, de acordo com o tipo de inscrição indicado no campo {sucessaoVinc/tpInsc}(./tpInsc).
        nrInsc: TS_nrInsc_11_14,
        /// Preencher com a data de admissão do trabalhador. No caso de transferência do empregado, deve ser preenchida a data inicial do vínculo no primeiro empregador (data de início do vínculo).
        dtAdm: date
    }),
    t.partial({
        /// Matrícula do trabalhador no empregador anterior.
        matricAnt: TS_codigo_esocial
    })
])

/// Identificação do beneficiário e do benefício.
/// CHAVE_GRUPO: {cpfBenef}, {nrBeneficio}
export const T_ideBeneficio = t.type({
    /// Informar o CPF do beneficiário.
    cpfBenef: TS_cpf,
    /// Número do benefício.
    nrBeneficio: TS_nrBeneficio
})

export const T_infoEstagiario = t.intersection([
    t.type({
        /// Natureza do estágio.
        natEstagio: t.union([
            /// Obrigatório
            t.literal('O'),
            /// Não obrigatório
            t.literal('N')
        ]),
        /// Informar o nível do estágio.
        nivEstagio: t.union([
            /// Fundamental
            t.literal(1),
            /// Médio
            t.literal(2),
            /// Formação profissional
            t.literal(3),
            /// Superior
            t.literal(4),
            /// Especial
            t.literal(8),
            /// Mãe social (Lei 7.644/1987)
            t.literal(9)
        ]),
        /// Data prevista para o término do estágio.
        /// Validação: Deve ser uma data posterior à data de início do estágio.
        dtPrevTerm: date,
        /// Instituição de ensino.
        instEnsino: t.partial({
            /// Preencher com o CNPJ da instituição de ensino. Deve ser preenchido apenas se a instituição de ensino for brasileira.
            /// Validação: Se informado, deve ser um CNPJ válido, com 14 (catorze) algarismos.
            cnpjInstEnsino: TS_cnpj,
            /// Informar a razão social.
            /// Validação: Preenchimento obrigatório e exclusivo se o campo {cnpjInstEnsino}(./cnpjInstEnsino) não estiver preenchido.
            nmRazao: TS_texto_100,
            /// Descrição do logradouro.
            /// Validação: Preenchimento obrigatório e exclusivo se o campo {cnpjInstEnsino}(./cnpjInstEnsino) não estiver preenchido.
            dscLograd: TS_dscLograd,
            /// Número do logradouro.
            /// Se não houver número a ser informado, preencher com "S/N".
            /// Validação: Preenchimento obrigatório e exclusivo se o campo {cnpjInstEnsino}(./cnpjInstEnsino) não estiver preenchido.
            nrLograd: TS_nrLograd,
            /// Nome do bairro/distrito.
            /// Validação: Preenchimento obrigatório e exclusivo se o campo {cnpjInstEnsino}(./cnpjInstEnsino) não estiver preenchido.
            bairro: TS_bairro,
            /// Código de Endereçamento Postal - CEP.
            /// Validação: Não informar se o campo {cnpjInstEnsino}(./cnpjInstEnsino) estiver preenchido. Se informado, deve ser preenchido apenas com números, com 8 (oito) posições.
            cep: TS_cep,
            /// Preencher com o código do município, conforme tabela do IBGE.
            /// Validação: Não informar se o campo {cnpjInstEnsino}(./cnpjInstEnsino) estiver preenchido. Se informado, deve ser um código válido e existente na tabela do IBGE.
            codMunic: TS_codMunic,
            /// Preencher com a sigla da Unidade da Federação - UF.
            /// Validação: Não informar se o campo {cnpjInstEnsino}(./cnpjInstEnsino) estiver preenchido.
            uf: TS_uf
        })
    }),
    t.partial({
        /// Área de atuação do estagiário.
        areaAtuacao: TS_texto_100,
        /// Número da apólice de seguro.
        nrApol: TS_codigo_esocial,
        /// Agente de integração.
        /// CONDICAO_GRUPO: OC
        ageIntegracao: t.type({
            /// CNPJ do agente de integração.
            /// Validação: Deve ser um CNPJ válido, com 14 (catorze) algarismos.
            cnpjAgntInteg: TS_cnpj
        }),
        /// Supervisor do estágio.
        /// CONDICAO_GRUPO: OC
        supervisorEstagio: t.type({
            /// CPF do responsável pela supervisão do estagiário.
            /// Validação: Deve ser um CPF válido.
            cpfSupervisor: TS_cpf
        })
    })
])

/// Informação de múltiplos vínculos
/// DESCRICAO_COMPLETA:Grupo preenchido exclusivamente em caso de trabalhador que possua outros vínculos/atividades nos quais já tenha ocorrido desconto de contribuição previdenciária.
/// CONDICAO_GRUPO: OC
export const T_infoMV = t.type({
    indMV: TS_indMV,
    /// Remuneração recebida pelo trabalhador em outras empresas ou atividades
    /// DESCRICAO_COMPLETA:Informações relativas ao trabalhador que possui vínculo empregatício com outra(s) empresa(s) e/ou que exerce outras atividades como contribuinte individual, detalhando as empresas que efetuaram (ou efetuarão) desconto da contribuição.
    /// CHAVE_GRUPO: {tpInsc}, {nrInsc}, {codCateg}
    remunOutrEmpr: t.type({
        tpInsc: TS_tpInsc_1_2,
        /// Informar o número de inscrição do contribuinte de acordo com o tipo de inscrição indicado no campo {remunOutrEmpr/tpInsc}(./tpInsc).
        /// Validação: a) Se {remunOutrEmpr/tpInsc}(./tpInsc) = [1], deve ser um CNPJ válido, diferente do CNPJ base indicado no evento de Informações do Empregador (S-1000) e dos estabelecimentos informados através do evento S-1005.
        /// b) Se {remunOutrEmpr/tpInsc}(./tpInsc) = [2], deve ser um CPF válido e diferente do CPF do trabalhador e ainda, caso o empregador seja pessoa física, diferente do CPF do empregador.
        nrInsc: TS_nrInsc_11_14,
        codCateg: TS_codCategOE,
        vlrRemunOE: TS_vlrRemunOE
    })
})

/// Informação relativa a empresas do Simples
/// DESCRICAO_COMPLETA:Informação relativa a empresas enquadradas no regime de tributação Simples Nacional.
/// CONDICAO_GRUPO: O (se {classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000 = [03]); N (nos demais casos)
export const T_infoSimples = t.type({
    /// Indicador de contribuição substituída.
    indSimples: TS_indSimples
})

/// Identificação do TSVE
/// DESCRICAO_COMPLETA:Identificação do Trabalhador Sem Vínculo de Emprego/Estatutário - TSVE.
/// CHAVE_GRUPO: {cpfTrab}, {matricula}, {codCateg}
export const T_ideTrabSemVinculo = t.intersection([
    t.type({
        cpfTrab: TS_cpfTrab
    }),
    t.partial({
        /// Matrícula atribuída ao trabalhador pela empresa.
        /// Validação: Deve corresponder à matrícula informada pelo empregador no evento S-2300 do respectivo contrato. Não preencher no caso de TSVE sem informação de matrícula no evento S-2300.
        matricula: TS_codigo_esocial,
        /// Preencher com o código da categoria do trabalhador.
        /// Informar somente no caso de TSVE sem informação de matrícula no evento S-2300.
        /// Validação: Informação obrigatória e exclusiva se não houver preenchimento de {matricula}(./matricula). Se informado, deve ser um código válido e existente na Tabela 01.
        codCateg: TS_codCateg
    })
])

/// Informações de identificação do trabalhador e do vínculo.
/// CHAVE_GRUPO: {cpfTrab}, {matricula}, {codCateg}
export const T_ideVinculo_sst = t.intersection([
    t.type({
        cpfTrab: TS_cpfTrab
    }),
    t.partial({
        /// Matrícula atribuída ao trabalhador pela empresa ou, no caso de servidor público, a matrícula constante no Sistema de Administração de Recursos Humanos do órgão.
        /// Validação: Deve corresponder à matrícula informada pelo empregador no evento S-2190, S-2200 ou S-2300 do respectivo contrato. Não preencher no caso de Trabalhador Sem Vínculo de Emprego/Estatutário - TSVE sem informação de matrícula no evento S-2300.
        matricula: TS_codigo_esocial,
        /// Preencher com o código da categoria do trabalhador.
        /// Informar somente no caso de TSVE sem informação de matrícula no evento S-2300.
        /// Validação: Informação obrigatória e exclusiva se não houver preenchimento de {matricula}(./matricula). Se informado, deve ser um código válido e existente na Tabela 01.
        codCateg: TS_codCateg
    })
])

/// Informações de identificação do trabalhador e do vínculo.
/// CHAVE_GRUPO: {cpfTrab}, {matricula}
export const T_ideVinculo = t.type({
    cpfTrab: TS_cpfTrab,
    /// Matrícula atribuída ao trabalhador pela empresa ou, no caso de servidor público, a matrícula constante no Sistema de Administração de Recursos Humanos do órgão.
    /// Validação: Deve corresponder à matrícula informada pelo empregador no evento S-2200 do respectivo vínculo trabalhista.
    matricula: TS_codigo_esocial
})

export const T_treiCap = t.type({
    /// Informar o código do treinamento, capacitação, exercício simulado ou outra anotação, conforme Tabela 28.
    /// Validação: Deve ser um código válido e existente na Tabela 28.
    codTreiCap: t.number
})

export const T_alvaraJudicial = t.type({
    /// Preencher com o número do processo judicial.
    /// Validação: Deve ser um número de processo judicial válido.
    nrProcJud: TS_nrProcJud
})

export const T_horContratual = t.intersection([
    t.type({
        /// Tipo de jornada.
        tpJornada: t.union([
            /// Jornada 12 x 36 (12 horas de trabalho seguidas de 36 horas ininterruptas de descanso)
            t.literal(2),
            /// Jornada com horário diário fixo e folga variável
            t.literal(3),
            /// Jornada com horário diário fixo e folga fixa (no domingo)
            t.literal(4),
            /// Jornada com horário diário fixo e folga fixa (exceto no domingo)
            t.literal(5),
            /// Jornada com horário diário fixo e folga fixa (em outro dia da semana), com folga adicional periódica no domingo
            t.literal(6),
            /// Turno ininterrupto de revezamento
            t.literal(7),
            /// Demais tipos de jornada
            t.literal(9)
        ]),
        /// Preencher com o código relativo ao tipo de contrato em tempo parcial.
        /// Validação: O código [1] só é válido se {codCateg}(../codCateg) = [104]. Os códigos [2, 3] não são válidos se {codCateg}(../codCateg) = [104].
        tmpParc: t.union([
            /// Não é contrato em tempo parcial
            t.literal(0),
            /// Limitado a 25 horas semanais
            t.literal(1),
            /// Limitado a 30 horas semanais
            t.literal(2),
            /// Limitado a 26 horas semanais
            t.literal(3)
        ]),
        /// Indicar se a jornada semanal possui horário noturno (no todo ou em parte).
        horNoturno: TS_sim_nao,
        /// Descrição da jornada semanal contratual, contendo os dias da semana e os respectivos horários contratuais (entrada, saída e intervalos).
        dscJorn: TS_texto_999
    }),
    t.partial({
        /// Quantidade média de horas relativas à jornada semanal do trabalhador.
        /// Validação: Deve ser preenchida se {codCateg}(../codCateg) for diferente de [111]. Se informada, deve ser maior que 0 (zero).
        qtdHrsSem: t.number
    })
])

export const T_localTrabGeral = t.intersection([
    t.type({
        tpInsc: TS_tpInsc_1_3_4,
        /// Informar o número de inscrição do contribuinte de acordo com o tipo de inscrição indicado no campo {localTrabGeral/tpInsc}(./tpInsc).
        /// Validação: Deve ser um número de inscrição válido e existente na Tabela de Estabelecimentos (S-1005), bem como compatível com {localTrabGeral/tpInsc}(./tpInsc).
        nrInsc: TS_nrInsc_12_14
    }),
    t.partial({
        /// Descrição complementar do local de trabalho.
        descComp: t.string
    })
])

export const T_remuneracao = t.intersection([
    t.type({
        vrSalFx: TS_vrSalFx,
        undSalFixo: TS_undSalFixo
    }),
    t.partial({
        /// Descrição do salário por tarefa ou variável e como este é calculado. Ex.: Comissões pagas no percentual de 10% sobre as vendas.
        /// Validação: Preenchimento obrigatório se {undSalFixo}(./undSalFixo) for igual a [6, 7].
        dscSalVar: TS_texto_999
    })
])

export const T_aprend = t.type({
    tpInsc: TS_tpInsc_1_2,
    /// Informar o número de inscrição do estabelecimento para o qual a contratação de aprendiz foi efetivada, de acordo com o tipo de inscrição indicado no campo {aprend/tpInsc}(./tpInsc).
    /// Validação: Deve ser um identificador válido e:
    /// a) Se {aprend/tpInsc}(./tpInsc) = [1], deve ser informado com 14 (catorze) algarismos. Se o empregador for pessoa jurídica, a raiz do CNPJ informado deve ser diferente de {ideEmpregador/nrInsc}(/ideEmpregador_nrInsc).
    /// b) Se {aprend/tpInsc}(./tpInsc) = [2], deve ser diferente do CPF do empregado. Se o empregador for pessoa física, também deve ser diferente do CPF do empregador.
    nrInsc: TS_nrInsc_11_14
})

export const T_contato = t.partial({
    /// Número de telefone do trabalhador, com DDD.
    /// Validação: Se preenchido, deve conter apenas números, com o mínimo de dez dígitos.
    fonePrinc: t.string,
    /// Endereço eletrônico.
    /// Validação: O e-mail deve ser possuir o caractere "@" e este não pode estar no início e no fim do e-mail. Deve possuir no mínimo um caractere "." depois do @ e não pode estar no início ou no final do e-mail.
    emailPrinc: t.string
})

/// Endereço no exterior.
/// CONDICAO_GRUPO: O (se não informado o grupo {brasil}(../brasil)); N (nos demais casos)
export const T_endereco_exterior = t.intersection([
    t.type({
        /// Preencher com o código do país.
        /// Validação: Deve ser um código válido e existente na Tabela 06.
        paisResid: TS_pais,
        dscLograd: TS_dscLograd,
        nrLograd: TS_nrLograd,
        /// Nome da cidade.
        nmCid: t.string
    }),
    t.partial({
        complemento: TS_complemento,
        bairro: TS_bairro,
        codPostal: TS_codPostal
    })
])

/// Endereço no Brasil.
/// CONDICAO_GRUPO: O (se não informado o grupo {exterior}(../exterior)); N (nos demais casos)
export const T_endereco_brasil = t.intersection([
    t.type({
        dscLograd: TS_dscLograd,
        nrLograd: TS_nrLograd,
        cep: TS_cep,
        codMunic: TS_codMunic,
        /// Preencher com a sigla da Unidade da Federação - UF.
        uf: TS_uf
    }),
    t.partial({
        tpLograd: TS_tpLograd,
        complemento: TS_complemento,
        bairro: TS_bairro
    })
])

/// Grupo de informações do nascimento do trabalhador.
export const T_nascimento = t.type({
    /// Preencher com a data de nascimento.
    dtNascto: date,
    /// Preencher com o código do país de nascimento do trabalhador.
    /// Validação: Deve ser um código válido e existente na Tabela 06.
    paisNascto: TS_pais,
    paisNac: TS_paisNac
})

/// Itens da remuneração do trabalhador
/// DESCRICAO_COMPLETA:Rubricas que compõem a remuneração do trabalhador.
export const T_itensRemun_rpps = t.intersection([
    t.type({
        /// Informar o código atribuído pelo empregador que identifica a rubrica em sua folha de pagamento.
        codRubr: TS_codigo_esocial,
        ideTabRubr: TS_ideTabRubr,
        vrRubr: TS_vrRubr,
        /// Indicativo de tipo de apuração de IR.
        indApurIR: TS_indApurIR
    }),
    t.partial({
        /// Informar a quantidade de referência para apuração (em horas, cotas, meses, etc.).
        /// Preenchimento obrigatório quando se tratar de rubrica relativa a faltas ou Descanso Semanal Remunerado - DSR sobre faltas (nesse caso, informar a quantidade de dias).
        /// Validação: Deve ser maior que 0 (zero). Informação obrigatória se {codRubr}(./codRubr) tiver {natRubr}(1010_infoRubrica_inclusao_dadosRubrica_natRubr) em S-1010 igual a [9207, 9211].
        qtdRubr: TS_qtdRubr,
        /// Informar o fator, percentual, etc. da rubrica, quando necessário.
        /// Validação: Deve ser maior que 0 (zero).
        fatorRubr: TS_fator
    })
])

export const T_infoInterm = t.type({
    dia: TS_dia
})

/// Informações sobre a existência de processos judiciais do trabalhador
/// DESCRICAO_COMPLETA:Informações sobre a existência de processos judiciais do trabalhador com decisão favorável quanto à não incidência de contribuições sociais e/ou Imposto de Renda.
/// CHAVE_GRUPO: {tpTrib}, {nrProcJud}, {codSusp}
/// CONDICAO_GRUPO: OC
export const T_procJudTrab = t.type({
    tpTrib: TS_tpTrib,
    nrProcJud: TS_nrProcJud_1,
    codSusp: TS_codSusp
})

/// Novo período de validade das informações.
/// DESCRICAO_COMPLETA:Informação preenchida exclusivamente em caso de alteração do período de validade das informações, apresentando o novo período de validade.
/// CONDICAO_GRUPO: OC
export const T_novaValidade = t.intersection([
    t.type({
        iniValid: TS_iniValid
    }),
    t.partial({
        fimValid: TS_fimValid
    })
])

/// Informações de identificação do empregador.
/// CHAVE_GRUPO: {tpInsc}, {nrInsc}
export const T_ideEmpregador_cnpj = t.type({
    tpInsc: TS_tpInsc_1,
    /// Informar o número de inscrição do contribuinte de acordo com o tipo de inscrição indicado no campo {ideEmpregador/tpInsc}(./tpInsc) e conforme informado em S-1000.
    nrInsc: t.string
})

/// Informações de identificação do empregador.
/// CHAVE_GRUPO: {tpInsc}, {nrInsc}
export const T_ideEmpregador = t.type({
    tpInsc: TS_tpInsc_1_2,
    /// Informar o número de inscrição do contribuinte de acordo com o tipo de inscrição indicado no campo {ideEmpregador/tpInsc}(./tpInsc) e conforme informado em S-1000.
    nrInsc: TS_nrInsc_8_11_14
})

/// Identificação do evento de retorno.
/// DESCRICAO_COMPLETA:Identificação do evento de retorno.
/// Evento de origem: S-1299.
export const T_ideEvento_retorno_contrib = t.type({
    indApuracao: TS_indApuracao,
    /// Informar o mês/ano (formato AAAA-MM) de referência das informações, se {indApuracao}(./indApuracao) for igual a [1], ou apenas o ano (formato AAAA), se {indApuracao}(./indApuracao) for igual a [2].
    perApur: TS_perApur
})

/// Identificação do evento de retorno.
export const T_ideEvento_retorno_trab = t.type({
    /// Preencher com o número do recibo do arquivo que deu origem ao presente arquivo de retorno ao empregador.
    /// Validação: Deve ser um recibo de entrega válido, correspondente ao arquivo que deu origem ao presente arquivo de retorno (S-1200, S-2299, S-2399 ou S-3000).
    nrRecArqBase: TS_nrRecibo,
    indApuracao: TS_indApuracao,
    /// Informar o mês/ano (formato AAAA-MM) de referência das informações, se {indApuracao}(./indApuracao) for igual a [1], ou apenas o ano (formato AAAA), se {indApuracao}(./indApuracao) for igual a [2].
    perApur: TS_perApur
})

/// Informações de identificação do evento.
export const T_ideEvento_trab_indGuia = t.intersection([
    t.type({
        indRetif: TS_indRetif,
        tpAmb: TS_tpAmb,
        procEmi: TS_procEmi,
        verProc: TS_verProc
    }),
    t.partial({
        nrRecibo: TS_nrRecibo,
        indGuia: TS_indGuia
    })
])

/// Informações de identificação do evento.
export const T_ideEvento_trab = t.intersection([
    t.type({
        tpAmb: TS_tpAmb,
        procEmi: TS_procEmi,
        verProc: TS_verProc
    }),
    t.partial({
        nrRecibo: TS_nrRecibo,
        indRetif: TS_indRetif
        /* The 'indRetif' field is marked as optional because it will not be included 
        when the event is sent to TAF. TAF handles rectifications independently, 
        and including this field in such cases could result in incorrect records. */
    })
])

/// Informações de identificação do evento.
/// CHAVE_GRUPO: {indApuracao}, {perApur}, {indGuia}
export const T_ideEvento_folha_sem_retificacao = t.intersection([
    t.type({
        indApuracao: TS_indApuracao,
        perApur: TS_perApur,
        tpAmb: TS_tpAmb,
        procEmi: TS_procEmi,
        verProc: TS_verProc
    }),
    t.partial({
        indGuia: TS_indGuia
    })
])

/// Informações de identificação do evento.
/// CHAVE_GRUPO: {perApur}, {indGuia}
export const T_ideEvento_folha_mensal = t.intersection([
    t.type({
        indRetif: TS_indRetif,
        perApur: TS_perApur_mensal,
        tpAmb: TS_tpAmb,
        procEmi: TS_procEmi,
        verProc: TS_verProc
    }),
    t.partial({
        nrRecibo: TS_nrRecibo,
        indGuia: TS_indGuia
    })
])

/// Informações de identificação do evento.
/// CHAVE_GRUPO: {indApuracao}, {perApur}
export const T_ideEvento_folha_opp = t.intersection([
    t.type({
        indRetif: TS_indRetif,
        indApuracao: TS_indApuracao,
        perApur: TS_perApur,
        tpAmb: TS_tpAmb,
        procEmi: TS_procEmi,
        verProc: TS_verProc
    }),
    t.partial({
        nrRecibo: TS_nrRecibo
    })
])

/// Informações de identificação do evento.
/// CHAVE_GRUPO: {indApuracao}, {perApur}, {indGuia}
export const T_ideEvento_folha = t.intersection([
    t.type({
        indRetif: TS_indRetif,
        indApuracao: TS_indApuracao,
        perApur: TS_perApur,
        tpAmb: TS_tpAmb,
        procEmi: TS_procEmi,
        verProc: TS_verProc
    }),
    t.partial({
        nrRecibo: TS_nrRecibo,
        indGuia: TS_indGuia
    })
])

/// Informações de identificação do evento.
export const T_ideEvento_evtTab = t.type({
    tpAmb: TS_tpAmb,
    procEmi: TS_procEmi,
    verProc: TS_verProc
})
